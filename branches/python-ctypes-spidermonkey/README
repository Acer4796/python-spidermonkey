=========================================
Python-Spidermonkey (pure ctypes version)
=========================================

This Python module allows for the implementation of Javascript?
classes, objects and functions in Python, as well as the evaluation
and calling of Javascript scripts and functions.

It is written in pure Python and depends on the ``ctypes`` library
(which is included by default as of Python 2.5).

A native SpiderMonkey binary library is required by the ctypes
wrappers.  Any modern binary should work, including those shipped
with Firefox on all platforms.

History
=======

The Pyrex code was written by John J. Lee in 2003.  After being
unmaintained for a number of years, it was subsequently picked up by
Atul Varma in the summer of 2008.  In the fall of 2008, Tim Dedischew 
discovered this project as well as Leonard Ritter's 2006 pure ctypes
port (of Lee's Pyrex code), and sought to standardized this project on
the ctypes version.

Tutorial
========

The first thing you'll want to do is create a ``Runtime`` instance,
which encapsulates a ``JSRuntime`` object from Spidermonkey.  From the
`JSAPI User Guide`_:

  A ``JSRuntime``, or *runtime*, is the space in which the Javascript
  variables, objects, scripts, and contexts used by your application
  are allocated. Every ``JSContext`` and every object in an
  application lives within a ``JSRuntime``. They cannot travel to
  other runtimes or be shared across runtimes. Most applications only
  need one runtime.

Creating the ``Runtime`` instance is straightforward:

  >>> from spidermonkey import Runtime, Context
  >>> rt = Runtime()

You'll then want to use the ``Runtime`` to create a ``Context``
instance, which encapsulates a ``JSContext`` object from Spidermonkey.
From the JSAPI User Guide:

  A ``JSContext``, or *context*, is like a little machine that can do
  many things involving Javascript code and objects. It can compile
  and execute scripts, get and set object properties, call Javascript
  functions, convert Javascript data from one type to another, create
  objects, and so on.

In Firefox, for instance, a different context is used for each webpage
you view.  A separate context is even created for each physical
browser window, because much of Firefox's functionality is actually
written in Javascript.  Contexts can have their own security
policies associated with them, and objects can be shared between
multiple contexts.

Creating a context in Python-Spidermonkey is done like so:

  >>> cx = Context(rt)

Now that you've got a context, you can do lots of things, like
evaluating arbitrary Javascript expressions and using their results in
Python code:

  >>> cx.eval("1 + 2") + 3
  6

We can create classes in Python and access them in Javascript, too:

  >>> class Foo:
  ...   def hello(self):
  ...     print "Hello, Javascript world!"
  >>> cx.mapPyClass(Foo)
  >>> cx.eval("var f = new Foo(); f.hello();")
  Hello, Javascript world!

We can also get back mapped Python objects from Javascript and use them:

  >>> f = cx.eval("f;")
  >>> f.hello()
  Hello, Javascript world!

.. _`JSAPI User Guide`: http://developer.mozilla.org/en/docs/JSAPI_User_Guide

Enhancements [was Limitations]
==============================

It's possible to call a function defined in Javascript from Python:

  >>> cx.mapJsFunc(
        cx.eval("function foo(x) { return x + 1; }; foo;"),
        static=True
      )(1)
  2

Errors in Javascript can emit helpful tracebacks now:

  >>> try:
        cx.eval("3 + undefinedVariable")
      except JSError, e:
        print "JavaScript error:", e

  JavaScript error: ReferenceError: undefinedVariable is not defined
  filename: eval_script
  lineno: 0

Installation
============

* There is nothing to build for the pure ctypes version.
  To use, simply place spidermonkey.py into a working folder along with
  a  Spidermonkey binary, for example:
   From Windows Firefox: jsXXXX.dll (and its dependency nsprN.dll)
   From *nix Firefox: libmozjs.so

.. _`SVN repository`: http://code.google.com/p/python-spidermonkey/source/checkout

Testing
=======

The module has a test suite.  Just run::

  python test.py

Note that one of the tests currently prints out a Javascript error
message.  This isn't a test failure (though it is a `bug`_).

.. _`bug`: http://code.google.com/p/python-spidermonkey/issues/detail?id=1

Acknowledgements
================

Kudos to John J. Lee, Leonard Ritter, Atul Varma, Brendan Eich, and Guido
